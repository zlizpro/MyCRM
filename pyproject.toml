[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "minicrm"
version = "1.0.0"
description = "基于tkinter/ttk的跨平台客户关系管理系统"
authors = [
    {name = "MiniCRM开发团队", email = "dev@minicrm.com"}
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.9"
keywords = ["crm", "customer", "management", "tkinter", "ttk"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Office/Business",
    "Topic :: Database :: Front-Ends",
]

# 核心依赖 - 基础功能必需
# 注意：MiniCRM的核心功能只依赖Python标准库（tkinter/ttk, sqlite3等）
# 所有文档处理和数据分析功能都是可选的，通过optional-dependencies提供
dependencies = [
    # 暂无必需的第三方依赖
    # tkinter/ttk 和 sqlite3 是Python内置库
]

# 可选功能依赖组
[project.optional-dependencies]
# 文档处理功能
documents = [
    "docxtpl>=0.16.0",          # Word模板处理
    "python-docx>=1.1.0",      # Word文档生成
    "reportlab>=4.0.0",        # PDF文档生成
]

# 数据分析功能
analytics = [
    "pandas>=2.1.0",           # 数据分析
    "numpy>=1.24.0",           # 数值计算
    "openpyxl>=3.1.0",         # Excel文件处理
]

# 图表功能
charts = [
    "matplotlib>=3.8.0",       # 数据可视化
]

# PDF生成功能
pdf = [
    "reportlab>=4.0.0",        # PDF生成
]

# 系统监控功能
monitoring = [
    "psutil>=5.9.0",           # 系统监控
]

# 完整功能包 (包含所有可选功能)
full = [
    "docxtpl>=0.16.0",          # Word模板处理
    "python-docx>=1.1.0",      # Word文档生成
    "reportlab>=4.0.0",        # PDF文档生成
    "pandas>=2.1.0",           # 数据分析
    "numpy>=1.24.0",           # 数值计算
    "openpyxl>=3.1.0",         # Excel文件处理
    "matplotlib>=3.8.0",       # 数据可视化
    "psutil>=5.9.0",           # 系统监控
]

# 开发依赖
dev = [
    "ruff>=0.1.15",            # 代码质量检查和格式化
    "mypy>=1.8.0",             # 静态类型检查
    "pytest>=7.4.0",          # 测试框架
    "pytest-cov>=4.1.0",      # 测试覆盖率
    "pytest-mock>=3.12.0",    # 测试模拟
    "black>=23.12.0",          # 代码格式化 (备用)
    "isort>=5.13.0",           # 导入排序 (备用)
]

# 打包依赖
build = [
    "PyInstaller>=6.0.0",      # 单文件打包
    "setuptools>=61.0",        # 构建工具
    "wheel>=0.42.0",           # 打包工具
]

[project.urls]
Homepage = "https://github.com/minicrm/minicrm"
Documentation = "https://minicrm.readthedocs.io"
Repository = "https://github.com/minicrm/minicrm.git"
"Bug Tracker" = "https://github.com/minicrm/minicrm/issues"

[project.scripts]
minicrm = "minicrm.main:main"

[project.gui-scripts]
minicrm-gui = "minicrm.main:main"

# ==================== 工具配置 ====================

# Ruff配置 - 替代black, flake8, isort
[tool.ruff]
# 目标Python版本
target-version = "py39"

# 代码行长度
line-length = 88

# 包含的文件类型
include = ["*.py", "*.pyi", "**/pyproject.toml"]

# 排除的目录和文件
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "*.egg-info",
]

[tool.ruff.lint]
# 启用的规则集
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "I",    # isort
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "UP",   # pyupgrade
    "ARG",  # flake8-unused-arguments
    "SIM",  # flake8-simplify
    "TCH",  # flake8-type-checking
    "PTH",  # flake8-use-pathlib
    "ERA",  # eradicate
    "PL",   # pylint
    "TRY",  # tryceratops
    "RUF",  # ruff-specific rules
]

# 忽略的规则
ignore = [
    "E501",   # line-too-long (由line-length处理)
    "B008",   # do-not-perform-function-calls-in-argument-defaults
    "B904",   # raise-without-from-inside-except
    "TRY003", # raise-vanilla-args
    "PLR0913", # too-many-arguments
    "PLR0912", # too-many-branches
    "PLR0915", # too-many-statements
]

# 每个文件的最大复杂度
mccabe = { max-complexity = 10 }

[tool.ruff.lint.isort]
# 导入排序配置
known-first-party = ["minicrm"]
force-single-line = false
lines-after-imports = 2

[tool.ruff.lint.pyupgrade]
# 保持与Python 3.9+兼容
keep-runtime-typing = true

[tool.ruff.format]
# 格式化配置
quote-style = "double"
indent-style = "space"
skip-source-first-line = false
line-ending = "auto"

# MyPy配置 - 静态类型检查
[tool.mypy]
# 基本配置
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

# 模块配置
[[tool.mypy.overrides]]
module = [
    "docxtpl.*",
    "openpyxl.*",
    "reportlab.*",
    "matplotlib.*",
    "pandas.*",
    "numpy.*",
]
ignore_missing_imports = true

# Pytest配置
[tool.pytest.ini_options]
# 测试发现
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

# 输出配置
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--tb=short",
    "--cov=src/minicrm",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-report=xml:coverage.xml",
    "--cov-fail-under=80",
]

# 标记定义
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "ui: marks tests as UI tests",
    "database: marks tests as database tests",
]

# 过滤警告
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

# Coverage配置
[tool.coverage.run]
source = ["src/minicrm"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/.venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.coverage.html]
directory = "htmlcov"

# Setuptools配置
[tool.setuptools]
package-dir = {"" = "src"}

[tool.setuptools.packages.find]
where = ["src"]
include = ["minicrm*"]
exclude = ["tests*"]

[tool.setuptools.package-data]
minicrm = [
    "*.json",
    "*.yaml",
    "*.yml",
    "templates/*.docx",
    "templates/*.xlsx",
    "ui/themes/*.qss",
    "ui/icons/*.png",
    "ui/icons/*.svg",
]

[dependency-groups]
dev = [
    "black>=25.1.0",
    "mypy>=1.17.1",
    "pytest>=8.4.1",
    "ruff>=0.12.8",
]
