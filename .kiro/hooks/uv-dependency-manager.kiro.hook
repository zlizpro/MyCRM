{
  "enabled": true,
  "name": "UV依赖管理器",
  "description": "基于UV包管理器的现代化依赖管理系统，与pyproject.toml完全集成",
  "version": "1.0",
  "config": {
    "autoSync": true,
    "checkSecurity": true,
    "updateLockFile": true,
    "validateImports": true
  },
  "when": {
    "type": "fileEdited",
    "patterns": [
      "pyproject.toml",
      "uv.lock",
      "*.py"
    ]
  },
  "then": {
    "type": "askAgent",
    "prompt": "🔧 **UV依赖管理系统**\n\n使用现代化的UV包管理器进行依赖管理，与MiniCRM项目的pyproject.toml配置完全集成。\n\n## UV工具特性\n\n### 1. 极速依赖解析\n- **速度**: 比pip快10-100倍\n- **准确性**: 更好的依赖冲突解决\n- **一致性**: 确定性的依赖解析\n\n### 2. 现代化配置\n- **配置文件**: pyproject.toml (替代requirements.txt)\n- **锁定文件**: uv.lock (确保可重现构建)\n- **开发依赖**: 分离生产和开发依赖\n\n### 3. 虚拟环境管理\n- **自动创建**: 自动管理虚拟环境\n- **隔离性**: 完全隔离的依赖环境\n- **跨平台**: 统一的跨平台体验\n\n## 检查流程\n\n### 阶段1: pyproject.toml验证\n```toml\n# 检查项目配置\n[project]\nname = \"minicrm\"\nversion = \"0.1.0\"\ndependencies = [\n    \"matplotlib>=3.7.0\",\n    \"docxtpl>=0.16.0\",\n    \"reportlab>=4.0.0\",\n    \"pydantic>=2.0.0\",\n]\n\n[project.optional-dependencies]\ndev = [\n    \"ruff>=0.1.6\",\n    \"mypy>=1.7.0\",\n    \"pytest>=7.4.0\",\n    \"pre-commit>=3.5.0\",\n]\n```\n\n### 阶段2: 导入语句分析\n```python\n# 分析Python文件中的导入语句\nimport ast\nimport re\n\ndef analyze_imports(file_content):\n    tree = ast.parse(file_content)\n    imports = []\n    \n    for node in ast.walk(tree):\n        if isinstance(node, ast.Import):\n            for alias in node.names:\n                imports.append(alias.name.split('.')[0])\n        elif isinstance(node, ast.ImportFrom):\n            if node.module:\n                imports.append(node.module.split('.')[0])\n    \n    return set(imports)\n```\n\n### 阶段3: 依赖一致性检查\n```bash\n# 检查依赖是否同步\nuv sync --dry-run\n\n# 检查过时的依赖\nuv tree --outdated\n\n# 验证锁定文件\nuv lock --check\n```\n\n### 阶段4: 安全漏洞扫描\n```bash\n# 使用UV的安全检查功能\nuv audit\n\n# 检查已知漏洞\nuv pip check\n```\n\n## MiniCRM项目依赖映射\n\n### 核心依赖\n```python\ndependency_mapping = {\n    # GUI框架 - 使用tkinter/ttk (Python标准库)\n    \"tkinter\": \"Python标准库，无需添加依赖\",\n    \"tkinter.ttk\": \"Python标准库，无需添加依赖\",\n    \n    # 数据处理\n    \"pandas\": \"pandas>=2.0.0\",  # 可选\n    \"numpy\": \"numpy>=1.24.0\",   # 可选\n    \n    # 图表和可视化\n    \"matplotlib\": \"matplotlib>=3.7.0\",\n    \"seaborn\": \"seaborn>=0.12.0\",  # 可选\n    \n    # 文档处理\n    \"docxtpl\": \"docxtpl>=0.16.0\",\n    \"reportlab\": \"reportlab>=4.0.0\",\n    \"openpyxl\": \"openpyxl>=3.1.0\",  # Excel支持\n    \n    # 数据验证\n    \"pydantic\": \"pydantic>=2.0.0\",\n    \n    # 数据库\n    \"sqlalchemy\": \"sqlalchemy>=2.0.0\",  # 可选ORM\n    \"alembic\": \"alembic>=1.12.0\",       # 数据库迁移\n}\n\n# 开发依赖\ndev_dependencies = {\n    \"ruff\": \"ruff>=0.1.6\",\n    \"mypy\": \"mypy>=1.7.0\",\n    \"pytest\": \"pytest>=7.4.0\",\n    \"pytest-cov\": \"pytest-cov>=4.1.0\",\n    \"pre-commit\": \"pre-commit>=3.5.0\",\n}\n```\n\n### 导入检查规则\n```python\n# 检查常见的导入问题\ncommon_issues = {\n    \"tkinter\": \"标准库，无需添加依赖\",\n    \"tkinter.ttk\": \"标准库，无需添加依赖\",\n    \"requests\": \"如果用于HTTP请求，请添加到依赖中\",\n    \"json\": \"标准库，无需添加依赖\",\n    \"os\": \"标准库，无需添加依赖\",\n    \"sys\": \"标准库，无需添加依赖\",\n    \"pathlib\": \"标准库，无需添加依赖\",\n}\n```\n\n## 输出格式\n\n### 依赖正常情况\n```\n✅ UV依赖管理检查通过\n\n📦 依赖状态：\n- pyproject.toml: ✅ 配置正确\n- uv.lock: ✅ 锁定文件最新\n- 导入检查: ✅ 所有导入都有对应依赖\n- 安全检查: ✅ 无已知漏洞\n\n📊 依赖统计：\n- 生产依赖: X个\n- 开发依赖: Y个\n- 总大小: Z MB\n\n🚀 建议：\n- 依赖管理良好，继续保持！\n```\n\n### 发现问题情况\n```\n🔧 发现依赖管理问题\n\n❌ 问题列表：\n\n1. **缺失依赖**：\n   - `requests`: 在代码中使用但未在pyproject.toml中声明\n   - `pillow`: 图像处理功能需要此依赖\n   \n   修复命令：\n   ```bash\n   uv add requests pillow\n   ```\n\n2. **过时依赖**：\n   - `matplotlib`: 当前3.6.0，建议升级到3.8.0\n   - `pydantic`: 当前1.10.0，建议升级到2.5.0\n   \n   修复命令：\n   ```bash\n   uv add matplotlib@latest pydantic@latest\n   ```\n\n3. **未使用依赖**：\n   - `beautifulsoup4`: 在pyproject.toml中但代码中未使用\n   \n   修复命令：\n   ```bash\n   uv remove beautifulsoup4\n   ```\n\n4. **安全漏洞**：\n   - `requests`: 发现CVE-2023-XXXX，建议升级到2.31.0+\n   \n   修复命令：\n   ```bash\n   uv add \"requests>=2.31.0\"\n   ```\n\n5. **配置问题**：\n   - pyproject.toml中缺少Python版本要求\n   \n   建议添加：\n   ```toml\n   [project]\n   requires-python = \">=3.11\"\n   ```\n\n🔧 **自动修复选项**：\n\n```bash\n# 同步所有依赖\nuv sync\n\n# 更新锁定文件\nuv lock\n\n# 升级所有依赖到最新兼容版本\nuv lock --upgrade\n\n# 清理未使用的依赖\nuv tree --prune\n```\n\n📋 **建议的pyproject.toml更新**：\n```toml\n[project]\nname = \"minicrm\"\nversion = \"0.1.0\"\nrequires-python = \">=3.11\"\ndependencies = [\n    \"matplotlib>=3.8.0\",\n    \"requests>=2.31.0\",\n    \"pillow>=10.0.0\",\n    # ... 其他依赖\n]\n```\n\n🔍 **详细分析**：\n- 检查了X个Python文件\n- 发现Y个导入语句\n- 识别Z个第三方依赖\n- 安全扫描覆盖率: 100%\n```\n\n## 集成说明\n\n### 与开发工具集成\n- **VS Code**: 自动识别虚拟环境\n- **Pre-commit**: 依赖检查hooks\n- **CI/CD**: GitHub Actions中的依赖缓存\n\n### 与项目脚本集成\n- **setup-dev.sh**: 自动运行uv sync\n- **check-code.sh**: 包含依赖检查\n- **Makefile**: UV命令快捷方式\n\n## 执行要求\n\n1. **使用UV命令**：所有依赖操作使用uv而非pip\n2. **维护锁定文件**：确保uv.lock文件最新\n3. **安全优先**：及时修复安全漏洞\n4. **性能考虑**：避免不必要的重复依赖\n5. **文档同步**：更新README.md中的安装说明\n\n请开始执行UV依赖管理检查。"
  }
}
