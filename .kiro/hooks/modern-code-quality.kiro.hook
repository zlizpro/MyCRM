{
  "enabled": true,
  "name": "现代化代码质量检查",
  "description": "使用Ruff、MyPy和uv的现代化Python代码质量检查系统，与MiniCRM项目的工具链完全兼容",
  "version": "2.0",
  "config": {
    "useRuff": true,
    "useMypy": true,
    "useUv": true,
    "autoFix": true,
    "checkComplexity": true,
    "maxFileLines": 200,
    "warningFileLines": 150
  },
  "when": {
    "type": "fileEdited",
    "patterns": [
      "*.py"
    ]
  },
  "then": {
    "type": "askAgent",
    "prompt": "🔧 **现代化代码质量检查系统**\n\n使用MiniCRM项目配置的现代化工具链进行代码质量检查和修复。\n\n## 工具链配置\n\n### 1. Ruff (超快速Linter + Formatter)\n- **功能**: 代码检查、格式化、导入排序\n- **配置**: pyproject.toml中的[tool.ruff]配置\n- **优势**: 比传统工具快10-100倍，集成多种工具功能\n\n### 2. MyPy (静态类型检查)\n- **功能**: 类型注解检查、类型推断\n- **配置**: pyproject.toml中的[tool.mypy]配置\n- **优势**: 发现运行时才会出现的类型错误\n\n### 3. UV (现代包管理)\n- **功能**: 依赖管理、虚拟环境、脚本执行\n- **配置**: pyproject.toml中的项目配置\n- **优势**: 极速依赖解析和安装\n\n## 检查流程\n\n### 阶段1: 文件大小检查\n```python\n# 检查文件行数\nmax_lines = {{config.maxFileLines}}  # 400行\nwarning_lines = {{config.warningFileLines}}  # 300行\n\nif file_lines > max_lines:\n    return \"❌ 文件过大 ({file_lines}行 > {max_lines}行)，需要拆分\"\nelif file_lines > warning_lines:\n    return \"⚠️ 文件较大 ({file_lines}行 > {warning_lines}行)，建议拆分\"\n```\n\n### 阶段2: Ruff检查和修复\n```bash\n# 1. 代码检查\nuv run ruff check {file_path} --output-format=github\n\n# 2. 自动修复（如果启用）\nif {{config.autoFix}}:\n    uv run ruff check {file_path} --fix\n    uv run ruff format {file_path}\n```\n\n### 阶段3: MyPy类型检查\n```bash\n# 类型检查\nuv run mypy {file_path} --show-error-codes --show-column-numbers\n```\n\n### 阶段4: 复杂度检查\n```python\n# 检查函数复杂度\nif {{config.checkComplexity}}:\n    # 使用Ruff的复杂度规则\n    uv run ruff check {file_path} --select C901,PLR0912,PLR0913,PLR0915\n```\n\n## MiniCRM特定检查\n\n### 1. Transfunctions使用检查\n```python\n# 检查是否应该使用transfunctions\ncommon_patterns = [\n    \"validate_.*_data\",\n    \"format_.*\",\n    \"calculate_.*\",\n    \"crud_.*_template\"\n]\n\nfor pattern in common_patterns:\n    if re.search(pattern, code) and \"from transfunctions\" not in code:\n        suggestions.append(f\"建议使用transfunctions.{pattern}\")\n```\n\n### 2. Qt组件检查\n```python\n# 检查Qt组件使用规范\nif \"PySide6\" in imports:\n    # 检查信号槽连接\n    # 检查资源清理\n    # 检查线程安全\n```\n\n### 3. 数据库操作检查\n```python\n# 检查数据库操作规范\nif \"sqlite3\" in imports or \"sqlalchemy\" in imports:\n    # 检查SQL注入防护\n    # 检查事务处理\n    # 检查连接管理\n```\n\n## 输出格式\n\n### 成功情况\n```\n✅ 代码质量检查通过\n\n📊 检查结果：\n- 文件大小: {file_lines}行 (✅ 符合标准)\n- Ruff检查: ✅ 无问题\n- MyPy检查: ✅ 类型正确\n- 复杂度: ✅ 在合理范围内\n\n🚀 建议：\n- 代码质量良好，继续保持！\n```\n\n### 发现问题情况\n```\n🔧 发现代码质量问题\n\n📊 检查结果：\n- 文件大小: {file_lines}行 (⚠️ 建议拆分)\n- Ruff检查: ❌ 发现X个问题\n- MyPy检查: ❌ 发现X个类型错误\n- 复杂度: ⚠️ 部分函数复杂度较高\n\n🔧 自动修复项：\n[显示Ruff自动修复的内容]\n\n❌ 需要手动修复：\n1. 类型注解问题：\n   - 第X行：函数缺少返回类型注解\n   - 第Y行：参数类型不明确\n\n2. 复杂度问题：\n   - 函数 `function_name` (第X行)：复杂度过高，建议拆分\n\n3. Transfunctions建议：\n   - 第X行：建议使用 `transfunctions.validate_customer_data`\n   - 第Y行：建议使用 `transfunctions.format_currency`\n\n🛠️ 修复命令：\n```bash\n# 自动修复格式问题\nuv run ruff check {file_path} --fix\nuv run ruff format {file_path}\n\n# 运行完整检查\n./scripts/check-code.sh\n```\n\n📚 参考文档：\n- Ruff配置: pyproject.toml [tool.ruff]\n- MyPy配置: pyproject.toml [tool.mypy]\n- 项目标准: .kiro/steering/minicrm-development-standards.md\n```\n\n## 集成说明\n\n### 与Pre-commit集成\n- 此Hook与pre-commit hooks协同工作\n- 开发时实时检查，提交时最终验证\n- 避免重复检查，提高效率\n\n### 与VS Code集成\n- 与VS Code设置(.vscode/settings.json)兼容\n- 支持实时错误提示和自动修复\n- 保存时自动格式化\n\n### 与CI/CD集成\n- 与GitHub Actions工作流(.github/workflows/ci.yml)一致\n- 本地检查与CI检查标准统一\n- 减少CI失败率\n\n## 执行要求\n\n1. **优先使用配置的工具**：严格使用uv、ruff、mypy\n2. **遵循项目标准**：按照pyproject.toml配置执行\n3. **提供具体建议**：不仅指出问题，还提供解决方案\n4. **支持自动修复**：能自动修复的问题直接修复\n5. **保持一致性**：与其他开发工具保持一致的检查标准\n\n请开始执行现代化代码质量检查。"
  }
}